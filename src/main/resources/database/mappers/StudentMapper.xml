<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  
  <mapper namespace="com.acadmi.student.StudentDAO">
  
  	<!-- 메인페이지 현재수강중인 강의 출력 -->
  	<select id="getCurrentLectureList" resultMap="CurrentLectureList" parameterType="LectureVO">
  		SELECT sl.*, l.*, p.NAME  
			FROM LECTURE l  
				JOIN STUDENT_LECTURE sl 
			ON (sl.LECTURENUM = l.LECTURENUM)
					JOIN PROFESSOR p
				ON (l.USERNAME = p.USERNAME)
		WHERE l.`YEAR` = DATE_FORMAT(NOW(), '%Y') 
			AND (
			  (l.SEMESTER = 1 AND DATE_FORMAT(NOW(), '%m') BETWEEN 3 AND 6)
			  OR (l.SEMESTER = 2 AND DATE_FORMAT(NOW(), '%m') BETWEEN 9 AND 12)
		)
		AND sl.USERNAME = #{username}
		AND l.STATUS=1
		
  	</select>
  	<resultMap type="LectureVO" id="CurrentLectureList">
  		<id property="lectureNum" column="LECTURENUM" />
  		<result column="LECTURENAME" property="lectureName"/>
  		<result column="STARTTIME" property="startTime"/>
  		<result column="ENDTIME" property="endTime"/>
  		<result column="WEEKDAY" property="weekday"/>
  		<association property="professorVO" javaType="ProfessorVO">
  			<result column="NAME" property="name"/>
  		</association>
  	</resultMap>


 	<!--내 수강 강좌 -->
 	<select id="getMyLectureList" parameterType="lectureVO" resultMap="MyLectureList">
		SELECT *  FROM LECTURE L 
			INNER JOIN 
				STUDENT_LECTURE SL 
			USING(LECTURENUM)
				INNER JOIN 
					PROFESSOR P 
				ON L.USERNAME = P.USERNAME
		WHERE SL.USERNAME=#{username}
		AND L.STATUS=1
		
		<if test="year ==null and semester ==null">
			AND L.YEAR=DATE_FORMAT(now(),'%Y') AND 
  			L.SEMESTER = CASE
    		WHEN MONTH(NOW()) BETWEEN 3 AND 8 THEN 1
    		ELSE 2
			END
		</if>
		<if test="year !=null and !year.equals('')">
			AND L.YEAR = #{year}
		</if>
		<if test="semester !=null and !semester.equals('')">
			AND L.SEMESTER=#{semester}
		</if>
 	</select>
 	<resultMap type="LectureVO" id="MyLectureList">
 		<id column="LECTURENUM" property="lectureNum"/>
 		<result column="USERNAME" property="username"/>
 		<result column="LECTURENAME" property="lectureName"/>
 		<result column="YEAR" property="year"/>
 		<result column="SEMESTER" property="semester"/>
 		<result column="CATEGORY" property="category"/>
 		<result column="SUBSCRIPTION" property="subscription"/>
 		<result column="COMPLETIONGRADE" property="completionGrade"/>
 		<result column="WEEKDAY" property="weekday"/>
 		<result column="STARTTIME" property="startTime"/>
 		<result column="ENDTIME" property="endTime"/>
 		<association property="studentLectureVO" javaType="StudentLectureVO">
 			<result column="USERNAME" property="username"/>
 		</association>
 		<association property="studentVO" javaType="StudentVO">
 			<result column="USERNAME" property="username"/>
 		</association>
 		<association property="professorVO" javaType="ProfessorVO">
 			<result column="NAME" property="name"/>
 		</association>

 	</resultMap>
 	
 	<!--내 성적 조회  -->
 	<select id="getMyCreditList" parameterType="lectureVO" resultMap="myCreditList">
		SELECT L.*, C.*, P.NAME, S.*,DENSE_RANK() OVER (PARTITION BY SL.LECTURENUM ORDER BY C.CREDIT DESC) AS RANK
		FROM STUDENT S
		INNER JOIN STUDENT_LECTURE SL ON (S.USERNAME = SL.USERNAME)
		INNER JOIN DEPARTMENT D ON (S.DEPTNUM = D.DEPTNUM)
		LEFT OUTER JOIN CREDIT C ON (SL.LECTURENUM = C.LECTURENUM AND SL.USERNAME = C.USERNAME)
		INNER JOIN LECTURE L ON SL.LECTURENUM = L.LECTURENUM
		INNER JOIN PROFESSOR P ON L.USERNAME = P.USERNAME
		WHERE SL.USERNAME = #{username}
		AND L.STATUS=1
		
		<if test="year ==null and semester ==null">
			AND L.YEAR=DATE_FORMAT(now(),'%Y') AND 
  			L.SEMESTER = CASE
    		WHEN MONTH(NOW()) BETWEEN 3 AND 8 THEN 1
    		ELSE 2
			END
		</if>
		<if test="year !=null and !year.equals('')">
			AND L.YEAR = #{year}
		</if>
		<if test="semester !=null and !semester.equals('')">
			AND L.SEMESTER=#{semester}
		</if>
		ORDER BY CREDIT DESC
 	</select>
 	
 	
 	
 	<resultMap type="LectureVO" id="myCreditList">
 		<id column="LECTURENUM" property="lectureNum"/>
 		<result column="LECTURENAME" property="lectureName"/>
 		<result column="CATEGORY" property="category"/>
 		<result column="YEAR" property="year"/>
 		<result column="SEMESTER" property="semester"/>
 		<result column="SUBSCRIPTION" property="subscription"/>
 		
 		<association property="studentLectureVO" javaType="StudentLectureVO">
 			<association property="creditVO" javaType="CreditVO">
 				<result column="CREDIT" property="credit"/>
 			</association>
 		</association>
 		<association property="professorVO" javaType="ProfessorVO">
 			<id column="USERNAME" property="username"/>
 			<result column="NAME" property="name"/>
 		</association>
 		<association property="studentVO" javaType="StudentVO">
 			<id column="USERNAME" property="username"/>
 			<result column="RANK" property="rank"/>
 		</association>
 		
 	</resultMap>
 	
 	<!-- 입학년도 ~ 재학년도-->
	<select id="getMaxYear" parameterType="LectureVO" resultType="Integer">
		SELECT MAX(L.YEAR) AS YEAR  FROM LECTURE L
			LEFT OUTER JOIN
				STUDENT_LECTURE SL 
			ON L.LECTURENUM=SL.LECTURENUM
				INNER JOIN 
					STUDENT S 
		WHERE S.USERNAME = #{username}
	</select>
	
	<select id="getMinYear" parameterType="lectureVO" resultType="Integer">
		SELECT MIN(L.YEAR) AS YEAR  FROM LECTURE L
			LEFT OUTER JOIN
				STUDENT_LECTURE SL 
			USING(LECTURENUM)
				INNER JOIN 
					STUDENT S 
		WHERE S.USERNAME = #{username}
	</select>
	
	<!--강의 메안페이지  -->
	<select id="getLectureProfessor" parameterType="LectureVO" resultMap="LectureResult">
		SELECT * FROM MEMBER M
			INNER JOIN 
				PROFESSOR P 
			ON M.USERNAME = P.USERNAME 
				INNER JOIN 
					LECTURE L 
				ON P.USERNAME = L.USERNAME
		WHERE LECTURENUM=#{lectureNum}
	</select>
	<resultMap type="lectureVO" id="LectureResult">
		<id column="LECTURENUM" property="lectureNum"/>
		<result column="LECTURENAME" property="lectureName"/>
		<result column="YEAR" property="year"/>
		<result column="SEMESTER" property="semester"/>
		<association property="professorVO" javaType="ProfessorVO">
			<id column="USERNAME" property="username"/>
			<result column="NAME" property="name"/>
			<result column="PHONE" property="phone"/>
			<result column="PROFESSORROOM" property="professorRoom"/>
			<result column="EMAIL" property="email"/>
		</association>
	</resultMap>
	
	<select id="getSyllabusClass" parameterType="LectureVO" resultType="ClassVO">
		 SELECT C.* FROM SYLLABUS S 
		 	INNER JOIN 
		 		CLASS C 
		 	ON(S.SYLLABUSNUM=C.SYLLABUSNUM) 
  				 INNER JOIN 
  				 	LECTURE L 
  				 ON(S.LECTURENUM=L.LECTURENUM) 
  			WHERE L.LECTURENUM=#{lectureNum}	
	</select>
	
	<!-- 메인페이지 공지사항 출력 -->
	<select id="getNoticeList" resultType="BoardVO">
		SELECT * FROM NOTICE
		ORDER BY NUM DESC 
		LIMIT 5
	</select>

	<!--강의 계획서 열람  -->
	
	<select id="getLectureDetail" parameterType="LectureVO" resultType="LectureVO">
		SELECT * FROM LECTURE WHERE LECTURENUM=#{lectureNum}
	</select>
	
	<select id="getSyllabusDetail" parameterType="LectureVO" resultMap="SyllabusDetail">
		SELECT * FROM SYLLABUS S 
			INNER JOIN 
				LECTURE L 
			ON(S.LECTURENUM=L.LECTURENUM) 
  				INNER JOIN 
  					PROFESSOR P 
  				ON(L.USERNAME=P.USERNAME)INNER JOIN MEMBER M ON(M.USERNAME=P.USERNAME)
  					INNER JOIN 
  						DEPARTMENT D 
  				ON(L.DEPTNUM=D.DEPTNUM) 
  		WHERE L.LECTURENUM =#{lectureNum}
	</select>
	<resultMap type="LectureVO" id="SyllabusDetail">
		<id column="LECTURENUM" property="lectureNum"/>
		<result column="LECTURENAME" property="lectureName"/>
		<result column="YEAR" property="year"/>
		<result column="WEEKDAY" property="weekday"/>
		<result column="STARTTIME" property="startTime"/>
		<result column="ENDTIME" property="endTime"/>
		<result column="GRADE" property="grade"/>
		<result column="COMPLETIONGRADE" property="completionGrade"/>
		<result column="LECTUREBUILDING" property="lectureBuilding"/>
		<result column="LECTUREROOM" property="lectureRoom"/>
		<result column="CATEGORY" property="category"/>
		<association property="syllabusVO" javaType="SyllabusVO">
			<id column="SYLLABUSNUM" property="syllabusNum"/>
			<result column="CURRICULUMOUTLINE" property="curriculumOutline"/>
			<result column="GOAL" property="goal"/>
			<result column="EVALUATION" property="evaluation"/>
			<result column="METHOD" property="method"/>
			<result column="BOOKNAME" property="bookName"/>
			<result column="BOOKAUTHOR" property="bookAuthor"/>
			<result column="BOOKPUBLISHER" property="bookPublisher"/>
			<result column="BOOKPUBLICATIONDATE" property="bookPublicationDate"/>
			<result column="BOOKISBN" property="bookISBN"/>
			<result column="BOOKNOTE" property="bookNote"/>
			<collection property="classVOs" javaType="List" ofType="ClassVO">
				<id column="ORDER" property="order"/>
				<result column="SUBJECT" property="subject"/>
				<result column="GOAL" property="goal"/>
				<result column="CAPABILITY" property="capability"/>
				<result column="NOTE" property="note"/>
			</collection>
		</association>
		<association property="departmentVO" javaType="DepartmentVO">
			<result column="DEPTNAME" property="deptName"/>
		</association>
	</resultMap>
	
	<!-- 강의 참여자 목록  -->
	<select id="getTotalCountStudent" resultType="Long">
		SELECT COUNT(USERNAME) FROM STUDENT
	</select>
	<select id="getAttendeeList" parameterType="Pagination" resultMap="AttendeeList">
		SELECT S.*,D.DEPTNAME, C.COLLEGENAME, MF.*FROM `MEMBER` M 
				INNER JOIN 
					STUDENT S 
				ON (M.USERNAME=S.USERNAME) 
					LEFT OUTER JOIN 
						MEMBERFILES MF 
					ON 	(M.USERNAME = MF.USERNAME)
					INNER JOIN 
						STUDENT_LECTURE SL 
					ON (M.USERNAME=SL.USERNAME) 
							INNER JOIN 
								DEPARTMENT D 
							ON(S.DEPTNUM=D.DEPTNUM) 
							INNER JOIN 
								COLLEGE C 
							ON D.COLLEGENUM = C.COLLEGENUM	
				WHERE LECTURENUM= #{lectureNum}
					<if test="search != null and !search.equals('')">
						AND S.USERNAME LIKE CONCAT('%',#{search},'%' )
					</if>
					<if test="name !=null and !name.equals('')">
						AND S.NAME LIKE CONCAT('%',#{name}, '%')
					</if>
				LIMIT #{startRow},#{perPage}
	</select>
	<resultMap type="StudentLectureVO" id="AttendeeList">
			<id column="LECTURENUM" property="lectureNum"/>
			<result column="USERNAME" property="username"/>
			<association property="lectureVO" javaType="LectureVO">
				<association property="collegeVO" javaType="CollegeVO">
				<id column="COLLEGENUM" property="collegeNum"/>
				<result column="COLLEGENAME" property="collegeName"/>
			</association>
			<association property="studentVO" javaType="StudentVO">
				<id column="USERNAME" property="username"/>
				<result column="NAME" property="name"/>
				<association property="memberFilesVO" javaType="MemberFilesVO">
					<id column="FILENUM" property="fileNum"/>
					<result column="FILENAME" property="fileName"/>
				</association>
			</association>
			<association property="departmentVO" javaType="DepartmentVO">
				<id column="DEPTNUM" property="deptNum"/>
				<result column="DEPTNAME" property="deptName"/>
			</association>
			</association>
			
	</resultMap>
	
	<!--수강 신청,장바구니 기간 막기 -->
	<select id="getApplication" resultType="PeriodVO">
		SELECT * FROM PERIOD P
		WHERE P.APPLICATIONSTART &lt;= NOW() AND P.APPLICATIONEND &gt;= NOW()
	</select>
	<select id="getFavorite" resultType="PeriodVO">
		SELECT * FROM PERIOD P
		WHERE P.FAVORITESTART &lt;= NOW() AND P.FAVORITEEND  &gt;= NOW();
	</select>
	
	<!-- 과제 리스트 -->
	<select id="getReportList"  resultMap="ReportDetail" parameterType="Map">
		SELECT *  FROM REPORT_REGISTRATION RR
			LEFT OUTER JOIN 
				REPORT R 
			ON R.REGISTRATIONNUM  = RR.REGISTRATIONNUM 
		WHERE RR.LECTURENUM = #{lectureNum}
		GROUP BY RR.REGISTRATIONNUM
		<if test="reportName!=null and !reportName.equals('')">
			AND REPORTNAME LIKE CONCAT('%',#{reportName},'%')
		</if>
	</select>
	
	
	<!-- 과제 상세 페이지  -->
	<select id="getReportDetail" resultMap="ReportDetail" parameterType="ReportRegistrationVO" >
		SELECT * FROM REPORT_REGISTRATION RR
			LEFT OUTER JOIN 
				REPORT R 
			ON RR.REGISTRATIONNUM  = R.REGISTRATIONNUM 
				LEFT OUTER JOIN
					REPORTFILES RF 
				ON R.REPORTNUM = RF.REPORTNUM 
		WHERE RR.REGISTRATIONNUM =#{registrationNum}
	</select>
	
	<!-- 과제 등룍 -->
	<insert id="setReportAdd" parameterType="ReportVO" useGeneratedKeys="true" keyProperty="reportNum">
		INSERT INTO REPORT 
		VALUES(0, #{registrationNum}, #{username}, 0, 0, NOW())
	</insert>
	
	<insert id="setReportFilesAdd" parameterType="ReportFilesVO">
		INSERT INTO REPORTFILES
		VALUES(0,#{reportNum}, #{fileName},#{oriName})
	</insert>

	<resultMap type="ReportRegistrationVO" id="ReportDetail">
		<id column="REGISTRATIONNUM" property="registrationNum"/>
		<result column="SYLLABUSNUM" property="syllabusNum"/>
		<result column="LECTURENUM" property="lectureNum"/>
		<result column="ORDER" property="order"/>
		<result column="REPORTNAME" property="reportName"/>
		<result column="CONTENTS" property="contents"/>
		<result column="REGISTRATIONSCORE" property="registrationScore"/>
		<result column="STARTDATE" property="startDate"/>
		<result column="SUBMISSIONDATE" property="submissionDate"/>
		<collection property="reportVOs" javaType="List" ofType="ReportVO">
			<id column="REPORTNUM" property="reportNum"/>
			<result column="USERNAME" property="username"/>
			<result column="SCORE" property="score"/>
			<result column="GRADING" property="grading"/>
			<result column="SUBMISSIONDATE" property="submissionDate"/>
			<collection property="reportFilesVOs" javaType="List" ofType="ReportFilesVO">
				<id column="FILENUM" property="fileNum"/>
				<result column="FILENAME" property="fileName"/>
				<result column="ORINAME" property="oriName"/>
			</collection>
		</collection>
	</resultMap>
	
	<!-- 과제 제출물 -->
	<select id="getMyReportList" resultMap="ReportList" parameterType="ReportVO">
		SELECT * FROM REPORT R
			LEFT OUTER JOIN
				REPORTFILES RF
			ON R.REPORTNUM  = RF.REPORTNUM 	
		WHERE R.USERNAME = #{username}
		AND R.REGISTRATIONNUM=#{registrationNum}
	</select>

	<select id="getFileDetail" parameterType="ReportFilesVO" resultType="ReportFilesVO">
		SELECT * FROM REPORTFILES
		WHERE FILENUM=#{fileNum}
	</select>
	
	<!--과제 제출물 삭제  -->
	<delete id="setReportDelete" parameterType="ReportVO">
		DELETE FROM REPORT 
		WHERE REPORTNUM=#{reportNum}
	</delete>
	
	<delete id="setReporFiletDelete" parameterType="ReportFilesVO">
		DELETE FROM REPORTFILES 
		WHERE FILENUM=#{fileNum}
	</delete>
	

	
	<resultMap type="ReportVO" id="ReportList">
		<id column="REPORTNUM" property="reportNum"/>
		<result column="REGISTRATIONNUM" property="registrationNum"/>
		<result column="USERNAME" property="username"/>
		<result column="SCORE" property="score"/>
		<result column="GRADING" property="grading"/>
		<result column="SUBMISSIONDATE" property="submissionDate"/>
		<collection property="reportFilesVOs" javaType="List" ofType="ReportFilesVO">
			<id column="FILENUM" property="fileNum"/>
			<result column="FILENAME" property="fileName"/>
			<result column="ORINAME" property="oriName"/>
		</collection>
	</resultMap>
	
	
	
  	
  </mapper>