<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.acadmi.administrator.AdministratorDAO">
 	<!-- SQL -->
 	<!-- 학생 검색 -->
	<sql id="studentSearch">
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="search != null and !search.equals('')">
				AND NAME LIKE CONCAT('%', #{search}, '%')
			</if>
			<if test="username != null and !username.equals('')">
				AND USERNAME = #{username}
			</if>
			<if test="grade != null and !grade.equals('')">
				AND GRADE = #{grade}
			</if>
 			<if test="deptName != null and !deptName.equals('')">
				AND DEPTNAME = #{deptName}
			</if>
			<if test="collegeName != null and !collegeName.equals('')">
				AND COLLEGENAME = #{collegeName}
			</if>
			<if test="status !=null and !status.equals('') ">
				AND S.STATUS=#{status}
			</if>
		</trim>
	</sql>		
 
 	<!-- 교수 검색 -->
 	<sql id="professorSearch">
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="search != null and !search.equals('')">
				AND NAME LIKE CONCAT('%', #{search}, '%')
			</if>
			<if test="username != null and !username.equals('')">
				AND USERNAME = #{username}
			</if>
			
 			<if test="deptName != null and !deptName.equals('')">
				AND DEPTNAME = #{deptName}
			</if>	
			<if test="collegeName != null and !collegeName.equals('')">
				AND COLLEGENAME = #{collegeName}
			</if>
			<if test="status !=null and !status.equals('') ">
				AND P.STATUS=#{status}
			</if>
		</trim>
	</sql>		
	
	<!--행정 검색  -->
 	<sql id="administratorSearch">
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="search != null and !search.equals('')">
				AND NAME LIKE CONCAT('%', #{search}, '%')
			</if>
			<if test="username != null and !username.equals('')">
				AND USERNAME = #{username}
			</if>
			
			<if test="status !=null and !status.equals('') ">
				AND A.STATUS=#{status}
			</if>
		</trim>
	</sql>		
	
	<!-- 강의실 검색 -->
	<sql id="lectureRoomSearch">
		<trim prefix="WHERE" prefixOverrides="AND |OR">
			<if test="lectureBuilding !=null and !lectureBuilding.equals('')">
				AND LECTUREBUILDING =#{lectureBuilding}
			</if>
			<if test="lectureRoom !=null and !lectureRoom.equals('')">
				AND LECTUREROOM=#{lectureRoom}
			</if>
			<if test="status !=null and !status.equals('') ">
				AND STATUS=#{status}
			</if>
		</trim>
	</sql>
	
	<!-- 학과 검색 -->
	<sql id="departmentSearch">
		<trim prefix="WHERE" prefixOverrides="AND |OR">
			<if test="collegeName !=null and !collegeName.equals('')">
				AND COLLEGENAME = #{collegeName}
			</if>
			<if test="search != null and !search.equals('')">
				AND DEPTNAME LIKE CONCAT('%', #{search}, '%')
			</if>
			<if test="status !=null and !status.equals('')">
				AND STATUS = #{status}
			</if>
		</trim>
	</sql>
	
	
    <!--회원 관리  -->
    
    
    <!--아이디  -->
    <update id="setUpdateSeq" parameterType="MemberSeqVO">
   		<selectKey keyProperty="memberSeq" resultType="Long" order="BEFORE">
      SELECT MEMBERSEQ+1 FROM MEMBERSEQ
      WHERE YEAR =#{year}
   		</selectKey>
     UPDATE MEMBERSEQ SET MEMBERSEQ = #{memberSeq} WHERE YEAR = #{year}
	</update>
	<select id="getYearSeq" resultType="Long" parameterType="MemberSeqVO">
		SELECT YEAR FROM MEMBERSEQ
		WHERE YEAR=#{year}
	</select>
	<select id="getMemberSeq" resultType="Long" parameterType="MemberSeqVO">
		SELECT MEMBERSEQ FROM MEMBERSEQ
		WHERE YEAR=#{year}
	</select>
	
	<insert id="setInsertSeq" parameterType="MemberSeqVO">
		INSERT INTO MEMBERSEQ
		VALUES(#{year},1)
	</insert>
	<select id="getCollege" resultType="CollegeVO">
		SELECT * FROM COLLEGE
	</select>
	<select id="getDepartment" resultType="DepartmentVO">
		SELECT * FROM DEPARTMENT
	</select>
	
	
	
	
  	<!--계정 생성  -->
  	<insert id="setMemberAdd" parameterType="MemberVO" useGeneratedKeys="true" keyProperty="username">
  		INSERT INTO MEMBER
  		VALUES(#{username},#{password},#{email},#{category},0)
  	</insert>
  	<insert id="setStudentAdd" parameterType="StudentVO" >
  		INSERT INTO STUDENT
  		VALUES(#{username},#{deptNum},#{grade},#{name},#{phone},#{birth},#{address},#{addressDetail},1)
  	</insert>
  	<insert id="setAdministratorAdd" parameterType="AdministratorVO">
  		INSERT INTO ADMINISTRATOR
  		VALUES(#{username},#{deptNum},#{name},#{phone},#{birth},#{address},#{addressDetail},1)
  	</insert>
  	<insert id="setProfessorAdd" parameterType="ProfessorVO">
  		INSERT INTO PROFESSOR
  		VALUES(#{username},#{deptNum},#{name},#{professorRoom},#{phone},#{birth},#{address},#{addressDetail},1)
  	</insert>
  	<insert id="setRoleAdd" parameterType="Map">
  			INSERT INTO MEMBER_ROLE
	  		VALUES(#{username}, #{roleNum})
  	</insert>
  	
	 <!-- 회원 조회 -->
  	
  	
  	<select id="getTotalCountProfessor" resultType="Long">
  		SELECT COUNT(USERNAME) FROM PROFESSOR
  	</select>
  	
  	<select id="getTotalCountStudent" resultType="Long">
  		SELECT COUNT(USERNAME) FROM STUDENT
  	</select>
  	<select id="getTotalCountAdministrator" resultType="Long">
  		SELECT COUNT(USERNAME) FROM ADMINISTRATOR
  	</select>
  
  	<select id="getStudentList"  parameterType="Pagination" resultMap="StudentList">
  		SELECT * FROM MEMBER M
		LEFT OUTER JOIN
			MEMBERFILES MF
		USING(USERNAME)
			INNER JOIN
				STUDENT S 
			USING(USERNAME)
				INNER JOIN
					DEPARTMENT D 
				USING(DEPTNUM)
					INNER JOIN 
						COLLEGE C 
					USING(COLLEGENUM)
					<include refid="studentSearch"></include>
		LIMIT #{startRow},#{perPage}					
  	</select>
  	<resultMap type="CollegeVO" id="StudentList">
  		<id column="COLLEGENUM" property="collegeNum"/>
  		<result column="COLLEGENAME" property="collegeName"/>
  		<collection property="departmentVOs" javaType="List" ofType="DepartmentVO">
  			<id column="DEPTNUM" property="deptNum"/>
  			<result column="DEPTNAME" property="deptName"/>
  			<collection property="studentVOs" javaType="List" ofType="StudentVO">
  				<id column="USERNAME" property="username"/>
  				<result column="GRADE" property="grade"/>
  				<result column="NAME" property="name"/>
  				<result column="PHONE" property="phone"/>
  				<result column="STATUS" property="status"/>
  				<association property="memberFilesVO" javaType="MemberFilesVO">
  					<id column="FILENUM" property="fileNum"/>
  					<result column="FILENAME" property="fileName"/>
  					<result column="ORINAME" property="oriName"/>
  				</association>
  			</collection>
  		</collection>
  	</resultMap>
  	
  	<select id="getProfessorList" resultMap="ProfessorList" parameterType="Pagination">
  		SELECT * FROM MEMBER M
		LEFT OUTER JOIN
			MEMBERFILES MF 
		USING(USERNAME)
			INNER JOIN
				PROFESSOR P 
		USING(USERNAME)
				INNER JOIN 
					DEPARTMENT D 
				USING(DEPTNUM)
					INNER JOIN
						COLLEGE C
					USING(COLLEGENUM)		
					<include refid="professorSearch"></include>	
		LIMIT #{startRow},#{perPage}			
  	</select>
  	<resultMap type="CollegeVO" id="ProfessorList">
  		<id column="COLLEGENUM" property="collegeNum"/>
  		<result column="COLLEGENAME" property="collegeName"/>
  		<result column="BUILDING" property="building"/>
  		<collection property="departmentVOs" javaType="List" ofType="DepartmentVO">
  			<id column="DEPTNUM" property="deptNum"/>
  			<result column="DEPTNAME" property="deptName"/>
  			<collection property="professorVOs" javaType="List" ofType="ProfessorVO">
  				<id column="USERNAME" property="username"/>
  				<result column="NAME" property="name"/>
  				<result column="EMAIL" property="email"/>
  				<result column="PHONE" property="phone"/>
  				<result column="PROFESSORROOM" property="professorRoom"/>
  				<result column="STATUS" property="status"/>
  				<association property="memberFilesVO" javaType="MemberFilesVO">
  					<id column="FILENUM" property="fileNum"/>
  					<result column="FILENAME" property="fileName"/>
  					<result column="ORINAME" property="oriName"/>
  				</association>
  			</collection>
  		</collection>
  	</resultMap>
  
  <select id="getAdministratorList" resultMap="AdminIstratorList" parameterType="Pagination">
  	SELECT * FROM MEMBER M
		LEFT OUTER JOIN
			MEMBERFILES MF 
		USING(USERNAME)
			INNER JOIN
				ADMINISTRATOR A
			USING(USERNAME)
				INNER JOIN 
					DEPARTMENT D 
				USING(DEPTNUM)		
				<include refid="administratorSearch"></include>	
	LIMIT #{startRow},#{perPage}			
  </select>
  
  <resultMap type="DepartmentVO" id="AdminIstratorList">
  	<id column="DEPTNUM" property="deptNum"/>
  	<result column="DEPTNAME" property="deptName"/>
		<collection property="administratorVOs" javaType="List" ofType="AdministratorVO">
			<id column="USERNAME" property="username"/>
			<result column="NAME" property="name"/>
			<result column="EMAIL" property="email"/>
			<result column="PHONE" property="phone"/>
			<result column="STATUS" property="status"/>
			<association property="memberFilesVO" javaType="MemberFilesVO">
				<id column="FILENUM" property="fileNum"/>
				<result column="FILENAME" property="fileName"/>
				<result column="ORINAME" property="oriName"/>
			</association>
		</collection>
  </resultMap>
  
  	<!-- 강의실 관리 -->
    
    <!-- 강의실 조회 -->
	<select id="getLectureRoomList" parameterType="Pagination" resultType="LectureRoomVO">
		SELECT * FROM LECTURE_ROOM
		<include refid="lectureRoomSearch"></include>
		LIMIT #{startRow},#{perPage}
	</select>
  
  	<select id="getTotalCountLectureRoom" resultType="Long">
  		SELECT COUNT(LECTUREROOM) FROM LECTURE_ROOM
  	</select>
 	<!-- 강의실 등록 -->
 	<insert id="setLectureRoomAdd" parameterType="LectureRoomVO">
 		INSERT INTO LECTURE_ROOM
 		VALUES(#{lectureBuilding},#{lectureRoom},#{personal},1)
 	</insert>
 	<select id="getLectureBuilding" resultType="LectureRoomVO">
 		SELECT DISTINCT LECTUREBUILDING 
		FROM LECTURE_ROOM 
 	</select>
 	<!--강의실 중복 체크 -->
 	<select id="LectureRoomDuplicateCheck" parameterType="LectureRoomVO" resultType="LectureRoomVO">
 		SELECT LECTUREBUILDING,LECTUREROOM 
		FROM LECTURE_ROOM 
		WHERE LECTUREBUILDING =#{lectureBuilding} AND LECTUREROOM = #{lectureRoom}
 	</select>
 	
 	<select id="getLectureRoomDetail" parameterType="LectureRoomVO" resultType="LectureRoomVO">
 		SELECT * FROM LECTURE_ROOM
		WHERE LECTUREBUILDING = #{lectureBuilding} AND LECTUREROOM = #{lectureRoom}
 	</select>
 	
 	<update id="setLectureRoomUpdate" parameterType="LectureRoomVO">
 		UPDATE LECTURE_ROOM SET
 		PERSONAL =#{personal},STATUS= #{status}
 		WHERE LECTUREBUILDING  = #{lectureBuilding} AND LECTUREROOM = #{lectureRoom}
 	</update>
 	
  
  <!--학과 관리  -->
  
  <!--학과 조회 -->
  	<select id="getDepartmentList" parameterType="Pagination" resultMap="DepartmentList">
  		SELECT * FROM DEPARTMENT D
			INNER JOIN 
				COLLEGE C 
			ON C.COLLEGENUM = D.COLLEGENUM
			<include refid="departmentSearch"></include>
		ORDER BY D.DEPTNUM DESC	
  		LIMIT #{startRow},#{perPage}
  	</select>
  	<resultMap type="CollegeVO" id="DepartmentList">
  		<id column="COLLEGENUM" property="collegeNum"/>
  		<result column="COLLEGENAME" property="collegeName"/>
  		<collection property="departmentVOs" javaType="List" ofType="DepartmentVO">
  			<id column="DEPTNUM" property="deptNum"/>
  			<result column="DEPTNAME" property="deptName"/>
  			<result column="STATUS" property="status"/>
  		</collection>
  	</resultMap>
  	
  	<select id="getTotalCountDepartment" resultType="Long">
  		SELECT COUNT(DEPTNUM) FROM DEPARTMENT
  	</select>
  	
 
  <update id="setDepartmentUpdate" parameterType="DepartmentVO">
  	UPDATE DEPARTMENT
  	SET COLLEGENUM=#{collegeNum}, DEPTNAME = #{deptName}, STATUS=#{status}
  	WHERE DEPTNUM=#{deptNum}
  </update>
  
  <select id="getDepartmentDetail" parameterType="DepartmentVO" resultType="DepartmentVO">
  	SELECT * FROM DEPARTMENT
  	WHERE DEPTNUM=#{deptNum}
  </select>
  
  <!--학과 등록 -->
  <insert id="setDepartmentAdd" parameterType="DepartmentVO">
  	INSERT INTO DEPARTMENT 
	VALUES(#{deptNum},#{collegeNum},#{deptName},#{status})
  </insert>	
  
  <select id="getDeptNum" resultType="Integer" >
  	SELECT MAX(DEPTNUM)  FROM DEPARTMENT
  </select>
  <!--학과 중복 체크  -->
  <select id="departmentDuplicateCheck" parameterType="DepartmentVO" resultType="DepartmentVO">
  	SELECT DEPTNAME FROM DEPARTMENT
  	WHERE DEPTNAME= #{deptName}
  </select>
  
  <!--기간 설정  -->
  <insert id="setPeriodAdd" parameterType="PeriodVO">
	INSERT INTO PERIOD 
	SET YEAR = #{year},
		SEMESTER = #{semester},
		APPLICATIONSTART = CONCAT(#{applicationStart},'%10:00:00'), 
		APPLICATIONEND = CONCAT(#{applicationEnd},'%23:59:59'),
		FAVORITESTART = CONCAT(#{favoriteStart}, '%10:00:00'),
		FAVORITEEND = CONCAT(#{favoriteEnd}, '%23:59:59'),
		REGISTRATIONSTART = CONCAT(#{registrationStart}, '%10:00:00'),
		DEADLINE = CONCAT(#{deadline}, '%23:59:59')
			ON DUPLICATE KEY UPDATE
		APPLICATIONSTART = CONCAT(#{applicationStart}, '%10:00:00'), 
		APPLICATIONEND = CONCAT(#{applicationEnd}, '%23:59:59'),
		FAVORITESTART = CONCAT(#{favoriteStart}, '%10:00:00'),	
		FAVORITEEND = CONCAT(#{favoriteEnd}, '%23:59:59'),
		REGISTRATIONSTART = CONCAT(#{registrationStart}, '%10:00:00'),
		DEADLINE = CONCAT(#{deadline}, '%23:59:59')
  </insert>

  <!--기간 조회 -->
  <select id="getPeriodList" resultType="PeriodVO" parameterType="Pagination">
  	SELECT * FROM PERIOD
  	<trim prefix="WHERE" prefixOverrides="AND |OR">
		<if test="year !=null and !year.equals('')">
			AND YEAR = #{year}
		</if>
		<if test="semester !=null and !semester.equals('')">
			AND SEMESTER = #{semester}
		</if>
	
	</trim>
 	LIMIT #{startRow},#{perPage}
  </select>
  
  
   <select id="getTotalCountPeriod" resultType="Long" >
   		SELECT COUNT(YEAR) FROM PERIOD 
   </select>
  
  <select id="getCurrentYear" resultType="java.lang.String">
  	SELECT YEAR(CURRENT_DATE()) AS YEAR
	UNION ALL
	SELECT YEAR(CURRENT_DATE()) + 1
	UNION ALL
	SELECT YEAR(CURRENT_DATE()) + 2
	UNION ALL
	SELECT YEAR(CURRENT_DATE()) + 3
	UNION ALL
	SELECT YEAR(CURRENT_DATE()) + 4
	UNION ALL
	SELECT YEAR(CURRENT_DATE()) + 5;
  </select>
  
  <select id="getCurrentYearMinus" resultType="java.lang.String">
  	SELECT YEAR(CURRENT_DATE()) AS YEAR
	UNION ALL
	SELECT YEAR(CURRENT_DATE()) - 1
	UNION ALL
	SELECT YEAR(CURRENT_DATE()) - 2
	UNION ALL
	SELECT YEAR(CURRENT_DATE()) - 3
	UNION ALL
	SELECT YEAR(CURRENT_DATE()) - 4
	UNION ALL
	SELECT YEAR(CURRENT_DATE()) - 5
  </select>
  
  <!--기간 수정 -->
  
  <select id="getPeriodDetail" parameterType="PeriodVO" resultType="PeriodVO">
  	SELECT YEAR,SEMESTER, DATE_FORMAT(APPLICATIONSTART,'%Y-%m-%d')APPLICATIONSTART , DATE_FORMAT(APPLICATIONEND, '%Y-%m-%d')APPLICATIONEND,
	DATE_FORMAT(FAVORITESTART,'%Y-%m-%d')FAVORITESTART, DATE_FORMAT(FAVORITEEND, '%Y-%m-%d')FAVORITEEND, 
	DATE_FORMAT(REGISTRATIONSTART,'%Y-%m-%d')REGISTRATIONSTART , DATE_FORMAT(DEADLINE, '%Y-%m-%d')DEADLINE 
	FROM PERIOD
  	WHERE YEAR = #{year} AND SEMESTER= #{semester}
  </select>
  
  <update id="getPeriodUpdate" parameterType="PeriodVO">
  	UPDATE PERIOD 
  	SET APPLICATIONSTART = CONCAT(#{applicationStart}, '%10:00:00'), 
  		APPLICATIONEND = CONCAT(#{applicationEnd}, '%23:59:59'),
		FAVORITESTART = CONCAT(#{favoriteStart}, '%10:00:00'),
		FAVORITEEND = CONCAT(#{favoriteEnd}, '%23:59:59'),
		REGISTRATIONSTART = CONCAT(#{registrationStart}, '%10:00:00'),
		DEADLINE = CONCAT(#{deadline}, '%23:59:59')
	WHERE YEAR = #{year} AND SEMESTER = #{semester}	
  </update>
  
  <!--강의 목록 조회  -->
  <select id="getLectureList" resultMap="LectureList" parameterType="Pagination">
  		SELECT D.DEPTNAME ,D.DEPTNUM, L.*, P.NAME, P.PROFESSORROOM , L.STATUS, A.*  FROM PROFESSOR P
		INNER JOIN 
			LECTURE L 
		ON L.USERNAME = P.USERNAME
			RIGHT OUTER JOIN
				DEPARTMENT D 
			ON L.DEPTNUM = D.DEPTNUM 
				INNER JOIN 
					ADMINISTRATOR A 
				ON L.DEPTNUM = A.DEPTNUM 	
		WHERE TEMPORARY =1
		AND A.USERNAME = #{username}
	
	
	<if test="deptName != null and !deptName.equals('')">
   		AND DEPTNAME = #{deptName}
	</if>
	<if test="year != null and !year.equals('')">
	    AND YEAR = #{year}
	</if>
	<if test="semester != null and !semester.equals('')">
	    AND SEMESTER = #{semester}
	</if>
	<if test="status !=null and !status.equals('')">
	    AND L.STATUS = #{status}
	</if>

	
	<if test="search != null and !search.equals('')">
		AND LECTURENAME LIKE CONCAT('%', #{search}, '%')
	</if>
	ORDER BY L.LECTURENUM  DESC
	LIMIT #{startRow},#{perPage}
 </select>  
 
 <resultMap type="LectureVO" id="LectureList">
 	<id column="LECTURENUM" property="lectureNum"/>
 	<result column="USERNAME" property="username"/>
 	<result column="LECTURENAME" property="lectureName"/>
 	<result column="SEMESTER" property="semester"/>
 	<result column="CATEGORY" property="category"/>
 	<result column="LECTUREBUILDING" property="lectureBuilding"/>
 	<result column="LECTUREROOM" property="lectureRoom"/>
 	<result column="SUBSCRIPTION" property="subscription" />
 	<result column="PERSONAL" property="personal"/>
 	<result column="YEAR" property="year"/>
 	<result column="WEEKDAY" property="weekday"/>
 	<result column="STARTTIME" property="startTime"/>
 	<result column="ENDTIME" property="endTime"/>
 	<result column="COMPLETIONGRADE" property="completionGrade"/>
 	<result column="STATUS" property="status"/>
 	<association property="departmentVO" javaType="DepartmentVO">
 		<result column="DEPTNAME" property="deptName"/>
 	</association>
 	<association property="professorVO" javaType="ProfessorVO">
 		<id column="USERNAME" property="username"/>
 		<result column="NAME" property="name"/>
 	</association>
 	<association property="administratorVO" javaType="AdministratorVO">
 		<id column="USERNAME" property="username"/>
 		<result column="NAME" property="name"/>
 	</association>
 	<association property="lectureRoomVO" javaType="LectureRoomVO">
 		<result column="PERSONAL" property="personal"/>
 		<collection property="timeTableVOs" javaType="List" ofType="TimeTableVO">
 			<id column="TIMETABLENUM" property="timeTableNum"/>
 			<result column="WEEKDAY" property="weekday"/>
 			<collection property="timeInfoVOs" javaType="List" ofType="TimeInfoVO">
 				<id column="TIMENUM" property="timeNum"/>
 				<result column="STARTTIME" property="startTime"/>
 				<result column="ENDTIME" property="endTime"/>
 			</collection>
 		</collection>
 	</association>
 </resultMap>
 
 <select id="getLectureListAll" resultMap="LectureList" parameterType="Pagination">
 		SELECT D.DEPTNAME ,D.DEPTNUM, L.*, P.NAME, P.PROFESSORROOM , L.STATUS, A.*  FROM PROFESSOR P
		INNER JOIN 
			LECTURE L 
		ON L.USERNAME = P.USERNAME
			RIGHT OUTER JOIN
				DEPARTMENT D 
			ON L.DEPTNUM = D.DEPTNUM 
				INNER JOIN
					ADMINISTRATOR A 
		WHERE TEMPORARY =1
		AND A.USERNAME = #{username}
		
		<if test="deptName != null and !deptName.equals('')">
   			AND DEPTNAME = #{deptName}
		</if>
		<if test="year != null and !year.equals('')">
		    AND YEAR = #{year}
		</if>
		<if test="semester != null and !semester.equals('')">
		    AND SEMESTER = #{semester}
		</if>
		<if test="status !=null and !status.equals('')">
		    AND L.STATUS = #{status}
		</if>
	
		
		<if test="search != null and !search.equals('')">
			AND LECTURENAME LIKE CONCAT('%', #{search}, '%')
		</if>
		ORDER BY L.LECTURENUM  DESC
		LIMIT #{startRow},#{perPage}
 </select>
 
 <select id="getDeptNumDetail" resultType="Integer" parameterType="String">
 	SELECT DEPTNUM FROM ADMINISTRATOR 
	WHERE USERNAME = #{username}
 </select>
 
  <select id="getTotalCountLecture" resultType="Long">
  	SELECT COUNT(LECTURENUM) FROM LECTURE
  </select>
  
  <!--강의 폐강  -->
  <update id="setLectureUpdate"  parameterType="LectureVO" >
  	UPDATE LECTURE
  	SET STATUS=0
  	WHERE LECTURENUM=#{lectureNum}
  </update>
  
  <!--강의 개겅 -->
  <update id="setLectureUpdate2" parameterType="LectureVO">
  	UPDATE LECTURE SET STATUS=1
  	WHERE LECTURENUM=#{lectureNum}
  </update>

  
  <!--강의실 배정  -->
  
  <select id="getLectureRoomAssignment" resultMap="LectureRoomAssignment" parameterType="Map">
		SELECT * FROM LECTURE_ROOM 
			WHERE PERSONAL &gt;= #{personal}
			AND STATUS=1
			AND (LECTUREROOM, LECTUREBUILDING ) NOT IN ( 
				SELECT LECTUREROOM , LECTUREBUILDING 
				FROM TIMETABLE 
					WHERE WEEKDAY = #{weekday}
					AND TIMENUM IN (
						SELECT TIMENUM 
						FROM TIMEINFO T 
						WHERE (STARTTIME, ENDTIME) = (#{startTime}, #{endTime})
						
					
				)	
		)
		
		LIMIT #{startRow}, #{perPage}
  </select>
  <resultMap type="LectureRoomVO" id="LectureRoomAssignment">
  	<id column="LECTUREBUILDING" property="lectureBuilding"/>
  	<id column="LECTUREROOM" property="lectureRoom"/>
  	<result column="PERSONAL" property="personal"/>
  	<result column="STATUS" property="status"/>
  	<collection property="timeTableVOs" javaType="List" ofType="TimeTableVO">
  		<id column="TIMETABLENUM" property="timeTableVO"/>
  		<result column="WEEKDAY" property="weekday"/>
  		<result column="TIMENUM" property="timeNum"/>
  		<result column="YEAR" property="year"/>
  		<result column="SEMESTER" property="semester"/>
  		<collection property="timeInfoVOs" javaType="List" ofType="TimeInfoVO">
  			<id column="TIMENUM" property="timeNum"/>
  			<result column="STARTTIME" property="startTime"/>
  			<result column="ENDTIME" property="endTime"/>
  		</collection>
  	</collection>
  </resultMap>
 	
 
  
  <select id="getTimeTable" resultType="TimeTableVO">
  	SELECT * FROM TIMETABLE
  </select>
 
  <select id="getLectureRoom" resultType="LectureRoomVO" parameterType="Pagination">
  	SELECT * FROM LECTURE_ROOM
  </select>
  
  <select id="getTotalCountAssiginment" resultType="Long">
  	SELECT COUNT(LECTUREROOM) FROM LECTURE_ROOM
	WHERE STATUS =1
  </select>
  
  <select id="getLectureNum" resultType="LectureVO" parameterType="LectureVO">
  	SELECT LECTURENUM FROM LECTURE 
	WHERE LECTURENUM = #{lectureNum}
  </select>
  


  <update id="setLectureRoomAssignmentUpdate" parameterType="LectureVO">
  	UPDATE LECTURE 
	SET LECTUREBUILDING= #{lectureBuilding}, LECTUREROOM = #{lectureRoom}, STATUS=1
	WHERE LECTURENUM = #{lectureNum}
  </update>
  
  </mapper>